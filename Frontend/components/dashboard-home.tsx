"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { LoadingButton } from "@/components/ui/loading-button"
import { PageLoader } from "@/components/ui/page-loader"
import { useLoading } from "@/hooks/use-loading"
import { useToast } from "@/hooks/use-toast"
import { DollarSign, ShoppingCart, Users, Package, TrendingUp, TrendingDown, RefreshCw, Download } from "lucide-react"
import apiClient from "@/lib/apiClient"

export function DashboardHome() {
  const [dashboardData, setDashboardData] = useState<any>({})
  const [initialLoading, setInitialLoading] = useState(true)
  const [recentSales, setRecentSales] = useState<any[]>([])
  const [topProducts, setTopProducts] = useState<any[]>([])

  const { loading: refreshLoading, withLoading: withRefreshLoading } = useLoading()
  const { loading: exportLoading, withLoading: withExportLoading } = useLoading()
  const { toast } = useToast()

  const getTopProducts = async () => {
    try {
      const data = await apiClient.get('/products/best-selling')
      setTopProducts(data.data.data || [])
    } catch (error) {
      console.log("error", error)
    }
  }

  const getStats = async () => {
    try {
      const res = await apiClient.get('/dashboard/stats');
      const stats = res.data.data;

      // Calculate today's sales total
      const todaySalesTotal = stats.todaySales.reduce(
        (sum: number, sale: any) => sum + Number(sale.total_amount),
        0
      );

      setDashboardData((prev: any) => ({
        ...prev,
        todaySales: todaySalesTotal,
        totalCustomers: stats.totalCustomers,
        lowStockItems: stats.lowStockProducts.length,
        totalTransactions: 123, // <-- hardcoded for now
        salesGrowth: 0,
        transactionGrowth: 0,
        customerGrowth: 0,
        inventoryGrowth: 0,
      }));
    } catch (error) {
      console.log("error", error);
    }
  }

  const getRecentSales = async () => {
    try {
      const data = await apiClient.get('/sale/recent')
      setRecentSales(data.data.data || [])
    } catch (error) {
      console.log(error)
    }
  }

  useEffect(() => {
    Promise.all([getTopProducts(), getStats(), getRecentSales()]).finally(() => setInitialLoading(false))
  }, [])

  const handleRefreshData = async () => {
    await withRefreshLoading(async () => {
      try {
        // Simulate data refresh
        await new Promise((resolve) => setTimeout(resolve, 1500))

        // Update some random values to show refresh
        setDashboardData((prev: any) => ({
          ...prev,
          todaySales: prev.todaySales + Math.random() * 100,
          totalTransactions: prev.totalTransactions + Math.floor(Math.random() * 10),
          lastRefresh: new Date().toLocaleTimeString(),
        }))

        toast({
          variant: "success",
          title: "Data Refreshed",
          description: "Dashboard data has been updated successfully",
        })
      } catch (error) {
        toast({
          variant: "destructive",
          title: "Refresh Failed",
          description: "Could not refresh dashboard data",
        })
      }
    })
  }

  const generateReport = (reportType: string) => {
    const reportData = {
      type: reportType,
      generatedAt: new Date().toISOString(),
      data: dashboardData,
      summary: {
        totalSales: dashboardData.todaySales,
        totalTransactions: dashboardData.totalTransactions,
        averageTransaction: dashboardData.todaySales / dashboardData.totalTransactions,
        topProduct: dashboardData.topProducts[0]?.name || "N/A",
      },
    }

    const reportContent = `
MANPASAND POS SYSTEM - ${reportType.toUpperCase()} REPORT
Generated: ${new Date(reportData.generatedAt).toLocaleString()}
================================================

SUMMARY:
- Total Sales: Rs ${reportData.summary.totalSales.toFixed(2)}
- Total Transactions: ${reportData.summary.totalTransactions}
- Average Transaction: Rs ${reportData.summary.averageTransaction.toFixed(2)}
- Top Product: ${reportData.summary.topProduct}

RECENT TRANSACTIONS:
${dashboardData.recentSales
        .map((sale: any) => `${sale.id} - ${sale.customer} - Rs ${sale.amount.toFixed(2)} - ${sale.status}`)
        .join("\n")}

TOP PRODUCTS:
${dashboardData.topProducts
        .map(
          (product: any, index: number) =>
            `${index + 1}. ${product.name} - ${product.sales} units - Rs ${product.revenue.toFixed(2)}`,
        )
        .join("\n")}

================================================
Report generated by MANPASAND POS System
    `

    const blob = new Blob([reportContent], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${reportType}-report-${Date.now()}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleExportReport = async () => {
    await withExportLoading(async () => {
      try {
        // Simulate report generation
        await new Promise((resolve) => setTimeout(resolve, 2000))

        generateReport("daily-sales")

        toast({
          variant: "success",
          title: "Report Exported",
          description: "Daily sales report has been downloaded successfully",
        })
      } catch (error) {
        toast({
          variant: "destructive",
          title: "Export Failed",
          description: "Could not generate the report",
        })
      }
    })
  }

  if (initialLoading) {
    return <PageLoader message="Loading dashboard..." />
  }

  const formatCurrency = (amount: number) => `Rs ${amount.toFixed(2)}`
  const formatGrowth = (growth?: number) => {
    if (typeof growth !== "number" || isNaN(growth)) return "N/A";
    return `${growth >= 0 ? "+" : ""}${growth.toFixed(1)}%`;
  };

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
          <p className="text-gray-600">
            Welcome back! Here's what's happening today.
            {dashboardData.lastRefresh && (
              <span className="text-sm text-green-600 ml-2">Last updated: {dashboardData.lastRefresh}</span>
            )}
          </p>
        </div>
        <div className="flex space-x-2">
          <LoadingButton
            variant="outline"
            onClick={handleRefreshData}
            loading={refreshLoading}
            loadingText="Refreshing..."
          >
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </LoadingButton>
          <LoadingButton onClick={handleExportReport} loading={exportLoading} loadingText="Generating...">
            <Download className="h-4 w-4 mr-2" />
            Export Report
          </LoadingButton>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="hover:shadow-md transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Today's Sales</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatCurrency(dashboardData.todaySales)}</div>
            <div className="flex items-center space-x-1 text-xs text-muted-foreground">
              {dashboardData.salesGrowth >= 0 ? (
                <TrendingUp className="h-3 w-3 text-green-600" />
              ) : (
                <TrendingDown className="h-3 w-3 text-red-600" />
              )}
              <span className={dashboardData.salesGrowth >= 0 ? "text-green-600" : "text-red-600"}>
                {formatGrowth(dashboardData.salesGrowth)}
              </span>
              <span>from yesterday</span>
            </div>
          </CardContent>
        </Card>

        <Card className="hover:shadow-md transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Transactions</CardTitle>
            <ShoppingCart className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{dashboardData.totalTransactions}</div>
            <div className="flex items-center space-x-1 text-xs text-muted-foreground">
              {dashboardData.transactionGrowth >= 0 ? (
                <TrendingUp className="h-3 w-3 text-green-600" />
              ) : (
                <TrendingDown className="h-3 w-3 text-red-600" />
              )}
              <span className={dashboardData.transactionGrowth >= 0 ? "text-green-600" : "text-red-600"}>
                {formatGrowth(dashboardData.transactionGrowth)}
              </span>
              <span>from yesterday</span>
            </div>
          </CardContent>
        </Card>

        <Card className="hover:shadow-md transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Customers</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{dashboardData.totalCustomers.toLocaleString()}</div>
            <div className="flex items-center space-x-1 text-xs text-muted-foreground">
              {dashboardData.customerGrowth >= 0 ? (
                <TrendingUp className="h-3 w-3 text-green-600" />
              ) : (
                <TrendingDown className="h-3 w-3 text-red-600" />
              )}
              <span className={dashboardData.customerGrowth >= 0 ? "text-green-600" : "text-red-600"}>
                {formatGrowth(dashboardData.customerGrowth)}
              </span>
              <span>this month</span>
            </div>
          </CardContent>
        </Card>

        <Card className="hover:shadow-md transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Low Stock Items</CardTitle>
            <Package className="h-4 w-4 text-yellow-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-600">{dashboardData.lowStockItems}</div>
            <div className="flex items-center space-x-1 text-xs text-muted-foreground">
              {dashboardData.inventoryGrowth >= 0 ? (
                <TrendingUp className="h-3 w-3 text-green-600" />
              ) : (
                <TrendingDown className="h-3 w-3 text-red-600" />
              )}
              <span className={dashboardData.inventoryGrowth >= 0 ? "text-green-600" : "text-red-600"}>
                {formatGrowth(dashboardData.inventoryGrowth)}
              </span>
              <span>from last week</span>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Sales */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              Recent Sales
              <Badge variant="secondary">{recentSales.length} transactions</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recentSales.length === 0 ? (
                <div className="text-gray-500">No recent sales found.</div>
              ) : (
                recentSales.map((sale: any, idx: number) => (
                  <div
                    key={idx}
                    className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    <div>
                      <div className="font-medium">{sale.productName}</div>
                    </div>
                    <div className="text-right">
                      <div className="font-medium">{formatCurrency(Number(sale.price))}</div>
                    </div>
                  </div>
                ))
              )}
            </div>
          </CardContent>
        </Card>

        {/* Top Products */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              Top Products
              <Badge variant="secondary">Today's best sellers</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {topProducts.length === 0 ? (
                <div className="text-gray-500">No top products found.</div>
              ) : (
                topProducts.map((product: any, index: number) => (
                  <div
                    key={product.id}
                    className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    <div className="flex items-center space-x-3">
                      <Badge variant="secondary">#{index + 1}</Badge>
                      <div>
                        <div className="font-medium flex items-center space-x-2">
                          <span>{product.name}</span>
                        </div>
                        <div className="text-sm text-gray-500">{product._count?.order_items || 0} units sold</div>
                      </div>
                    </div>
                    <div className="font-medium">{formatCurrency(Number(product.sales_rate_inc_dis_and_tax || 0))}</div>
                  </div>
                ))
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
